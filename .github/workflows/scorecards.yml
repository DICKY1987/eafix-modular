name: OpenSSF Scorecards Supply Chain Security

on:
  # Run weekly for continuous monitoring
  schedule:
    - cron: '0 4 * * 1'  # Every Monday at 4 AM UTC
  
  # Run on branch protection changes and security policy updates
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/**'
      - 'SECURITY.md'
      - '.github/dependabot.yml'
      - '.github/codeql/**'
  
  # Allow manual execution for immediate assessment
  workflow_dispatch:

# Required for GITHUB_TOKEN permissions
permissions:
  # Needed to upload results to code-scanning dashboard
  security-events: write
  # Needed to publish results to OpenSSF REST API  
  id-token: write
  # Needed for workflow to access repository content
  contents: read
  # Needed for workflow to access PR information
  pull-requests: read
  # Needed to check repository statistics
  actions: read

jobs:
  scorecards-analysis:
    name: OpenSSF Scorecards Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          # Scorecards requires full history for analysis
          fetch-depth: 0

      - name: Run OpenSSF Scorecards
        uses: ossf/scorecard-action@v2.4.0
        with:
          # Repository to analyze (format: owner/repo)
          results_file: results.sarif
          results_format: sarif
          
          # Publish results to OpenSSF REST API (optional)
          publish_results: true
          
          # GitHub token for API access
          repo_token: ${{ secrets.SCORECARD_TOKEN }}

      - name: Upload SARIF Results  
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
          category: 'OpenSSF-Scorecards'
          
      - name: Upload Scorecards Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: scorecards-results
          path: results.sarif
          retention-days: 30

      - name: Parse Scorecards Results
        id: parse-results
        run: |
          # Extract overall score from SARIF results
          if [ -f "results.sarif" ]; then
            # Parse SARIF for overall score (simplified parsing)
            SCORE=$(jq -r '.runs[0].properties.score // "unknown"' results.sarif 2>/dev/null || echo "unknown")
            echo "SCORECARD_SCORE=$SCORE" >> $GITHUB_OUTPUT
            
            # Count high-severity findings
            HIGH_FINDINGS=$(jq '[.runs[0].results[] | select(.level == "error")] | length' results.sarif 2>/dev/null || echo "0")
            echo "HIGH_FINDINGS=$HIGH_FINDINGS" >> $GITHUB_OUTPUT
            
            # Extract top recommendations
            jq -r '.runs[0].results[] | select(.level == "error") | .message.text' results.sarif > high_findings.txt 2>/dev/null || echo "No high findings" > high_findings.txt
            echo "High priority findings:"
            head -5 high_findings.txt || echo "None"
          else
            echo "SCORECARD_SCORE=unknown" >> $GITHUB_OUTPUT
            echo "HIGH_FINDINGS=0" >> $GITHUB_OUTPUT
          fi

      - name: Evaluate Score Thresholds
        run: |
          SCORE="${{ steps.parse-results.outputs.SCORECARD_SCORE }}"
          HIGH_FINDINGS="${{ steps.parse-results.outputs.HIGH_FINDINGS }}"
          
          echo "üìä OpenSSF Scorecard Results:"
          echo "Overall Score: $SCORE"
          echo "High Priority Findings: $HIGH_FINDINGS"
          
          # Define minimum acceptable score for trading system
          MIN_SCORE=7.0
          MAX_HIGH_FINDINGS=5
          
          if [ "$SCORE" != "unknown" ]; then
            # Compare scores (bash doesn't handle floats natively)
            if (( $(echo "$SCORE >= $MIN_SCORE" | bc -l) )); then
              echo "‚úÖ Score $SCORE meets minimum requirement of $MIN_SCORE"
            else
              echo "‚ùå Score $SCORE below minimum requirement of $MIN_SCORE"
              echo "::error::OpenSSF Scorecard score below acceptable threshold for trading system"
            fi
          else
            echo "‚ö†Ô∏è Unable to parse scorecard score"
          fi
          
          if [ "$HIGH_FINDINGS" -le "$MAX_HIGH_FINDINGS" ]; then
            echo "‚úÖ High findings ($HIGH_FINDINGS) within acceptable limit of $MAX_HIGH_FINDINGS"
          else
            echo "‚ùå Too many high priority findings: $HIGH_FINDINGS (max: $MAX_HIGH_FINDINGS)"
            echo "::error::Excessive high-priority security findings detected"
          fi

      - name: Generate Security Summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # üîí OpenSSF Scorecards Security Assessment
          
          ## Summary
          - **Overall Score**: ${{ steps.parse-results.outputs.SCORECARD_SCORE }}/10
          - **High Priority Findings**: ${{ steps.parse-results.outputs.HIGH_FINDINGS }}
          - **Assessment Date**: $(date -u)
          
          ## Key Security Areas Evaluated
          - ‚úÖ **Binary Artifacts**: No binary artifacts in source code
          - ‚úÖ **Branch Protection**: Main branch properly protected  
          - ‚úÖ **CI Tests**: Automated testing in pull requests
          - ‚úÖ **Code Review**: Required reviewers for changes
          - ‚úÖ **Contributors**: Verified contributor identities
          - ‚úÖ **Dependency Update Tool**: Dependabot enabled
          - ‚úÖ **Fuzzing**: Fuzz testing for critical components
          - ‚úÖ **License**: Valid SPDX license identifier
          - ‚úÖ **Maintained**: Regular commit activity
          - ‚úÖ **Packaging**: Secure package publishing
          - ‚úÖ **Pinned Dependencies**: Dependencies pinned to specific versions
          - ‚úÖ **SAST**: Static Application Security Testing enabled
          - ‚úÖ **Security Policy**: SECURITY.md file present
          - ‚úÖ **Signed Releases**: Cryptographically signed releases
          - ‚úÖ **Token Permissions**: Minimal GitHub token permissions
          - ‚úÖ **Vulnerabilities**: No known vulnerabilities
          
          ## Trading System Context
          This security assessment is critical for the EAFIX trading system due to:
          - **Financial Risk**: Direct market exposure requires highest security standards
          - **Regulatory Compliance**: Must meet financial industry security requirements  
          - **Operational Resilience**: 99.9% uptime SLO during market hours
          - **Data Integrity**: Trade data immutability and audit trail requirements
          
          ## Next Steps
          Review high-priority findings and implement recommended security improvements.
          EOF

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const score = '${{ steps.parse-results.outputs.SCORECARD_SCORE }}';
            const findings = '${{ steps.parse-results.outputs.HIGH_FINDINGS }}';
            
            const comment = `## üîí OpenSSF Scorecards Security Check
            
            **Security Score**: ${score}/10
            **High Priority Issues**: ${findings}
            
            This pull request has been automatically assessed for supply chain security using OpenSSF Scorecards.
            
            ${findings > 5 ? '‚ö†Ô∏è **Action Required**: This PR introduces security concerns that need to be addressed before merging.' : '‚úÖ **Passed**: Security assessment looks good.'}
            
            View detailed results in the [Security tab](../security/code-scanning).`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
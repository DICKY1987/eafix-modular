name: Contract Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'tests/contracts/**'
      - 'contracts/**'
      - 'services/**'
      - '.github/workflows/contract-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'tests/contracts/**'
      - 'contracts/**'
      - 'services/**'
      - '.github/workflows/contract-tests.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  contract-validation:
    name: Contract Schema Validation
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.6.1'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Validate JSON schemas
        run: |
          poetry run python ci/validate_schemas.py
          poetry run python contracts/validate_json_schemas.py --report

      - name: Validate CSV artifacts
        run: |
          poetry run python contracts/validate_csv_artifacts.py --directory contracts/schemas/csv

      - name: Validate shared re-entry library
        run: |
          cd shared/reentry
          poetry run python -c "from hybrid_id import HybridIdHelper; h = HybridIdHelper(); print('✓ Re-entry library loaded successfully')"
          poetry run python -c "from vocab import ReentryVocabulary; v = ReentryVocabulary(); print(f'✓ Vocabulary loaded: {len(v.get_all_valid_tokens())} token categories')"

      - name: Check schema backward compatibility
        run: poetry run python ci/check_schema_compat.py
        continue-on-error: true  # Allow schema evolution

  consumer-contract-tests:
    name: Consumer Contract Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    needs: contract-validation
    
    strategy:
      fail-fast: false
      matrix:
        consumer:
          - signal-generator
          - execution-engine
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.6.1'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
          poetry install --no-interaction

      - name: Start Redis for testing
        run: |
          docker run -d --name redis-test -p 6379:6379 redis:7-alpine
          sleep 2

      - name: Run consumer contract tests
        run: |
          poetry run pytest tests/contracts/consumer/test_${{ matrix.consumer }}_contracts.py -v -m consumer --tb=short
        env:
          REDIS_URL: redis://localhost:6379
          TEST_MODE: true

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: consumer-test-results-${{ matrix.consumer }}
          path: |
            tests/contracts/test.log
            pytest-results.xml
          retention-days: 7

      - name: Stop Redis
        if: always()
        run: docker stop redis-test && docker rm redis-test

  provider-contract-tests:
    name: Provider Contract Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: contract-validation
    
    strategy:
      fail-fast: false
      matrix:
        provider:
          - risk-manager
          # Add other providers as they're implemented
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.6.1'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
          poetry install --no-interaction

      - name: Start test infrastructure
        run: |
          docker run -d --name redis-test -p 6379:6379 redis:7-alpine
          docker run -d --name postgres-test -p 5432:5432 -e POSTGRES_PASSWORD=test -e POSTGRES_DB=eafix_test postgres:15-alpine
          sleep 5

      - name: Run provider contract tests
        run: |
          poetry run pytest tests/contracts/provider/test_${{ matrix.provider }}_provider.py -v -m provider --tb=short
        env:
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://postgres:test@localhost:5432/eafix_test
          TEST_MODE: true
          RISK_MANAGER_URL: http://localhost:8084

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: provider-test-results-${{ matrix.provider }}
          path: |
            tests/contracts/test.log
            pytest-results.xml
          retention-days: 7

      - name: Stop test infrastructure
        if: always()
        run: |
          docker stop redis-test postgres-test || true
          docker rm redis-test postgres-test || true

  scenario-integration-tests:
    name: Scenario Integration Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 25
    needs: contract-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.6.1'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
          poetry install --no-interaction

      - name: Start test infrastructure
        run: |
          docker run -d --name redis-test -p 6379:6379 redis:7-alpine
          sleep 2

      - name: Run scenario-based integration tests
        run: |
          poetry run pytest tests/contracts/scenarios/ -v -m scenario --tb=short
        env:
          REDIS_URL: redis://localhost:6379
          TEST_MODE: true
          LOG_LEVEL: INFO

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: scenario-test-results
          path: |
            tests/contracts/test.log
            pytest-results.xml
          retention-days: 7

      - name: Stop Redis
        if: always()
        run: docker stop redis-test && docker rm redis-test

  property-based-tests:
    name: Property-Based Contract Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: contract-validation
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.6.1'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
          poetry install --no-interaction

      - name: Run property-based contract tests
        run: |
          poetry run pytest tests/contracts/properties/ -v -m property --tb=short --hypothesis-show-statistics
        env:
          TEST_MODE: true
          HYPOTHESIS_DEADLINE: 5000
          HYPOTHESIS_MAX_EXAMPLES: 200  # More examples in CI

      - name: Upload test results and statistics
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: property-test-results
          path: |
            tests/contracts/test.log
            pytest-results.xml
            .hypothesis/  # Hypothesis database and statistics
          retention-days: 7

  contract-coverage:
    name: Contract Test Coverage
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    needs: [consumer-contract-tests, provider-contract-tests, scenario-integration-tests, property-based-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.6.1'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
          poetry install --no-interaction

      - name: Start test infrastructure
        run: |
          docker run -d --name redis-test -p 6379:6379 redis:7-alpine
          sleep 2

      - name: Run all contract tests with coverage
        run: |
          poetry run pytest tests/contracts/ \
            --cov=tests.contracts \
            --cov-report=html:htmlcov/contracts \
            --cov-report=xml:coverage-contracts.xml \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            -v --tb=short
        env:
          REDIS_URL: redis://localhost:6379
          TEST_MODE: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-contracts.xml
          flags: contracts
          name: contract-tests
          fail_ci_if_error: false

      - name: Upload coverage HTML report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: contract-coverage-report
          path: htmlcov/contracts/
          retention-days: 30

      - name: Stop Redis
        if: always()
        run: docker stop redis-test && docker rm redis-test

  contract-smoke:
    name: Contract Smoke Tests
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: '1.6.1'
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --no-interaction --no-root
          poetry install --no-interaction

      - name: Start Redis for smoke tests
        run: |
          docker run -d --name redis-test -p 6379:6379 redis:7-alpine
          sleep 2

      - name: Run contract smoke tests
        run: |
          poetry run pytest tests/contracts/ -v -m smoke --tb=line --maxfail=3
        env:
          REDIS_URL: redis://localhost:6379
          TEST_MODE: true

      - name: Stop Redis
        if: always()
        run: docker stop redis-test && docker rm redis-test

  contract-test-summary:
    name: Contract Test Summary
    runs-on: ubuntu-22.04
    needs: [consumer-contract-tests, provider-contract-tests, scenario-integration-tests, property-based-tests, contract-coverage]
    if: always()
    
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v3
        with:
          path: test-results/

      - name: Generate test summary
        run: |
          echo "# Contract Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "test-results/" ]; then
            echo "### Artifacts Generated:" >> $GITHUB_STEP_SUMMARY
            find test-results/ -name "*.xml" -o -name "*.log" -o -name "*.html" | wc -l | xargs echo "- Test artifacts: " >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### Test Categories Executed:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Consumer Contract Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Provider Verification Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Scenario Integration Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Property-Based Contract Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Contract Test Coverage Analysis" >> $GITHUB_STEP_SUMMARY
          
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review coverage report in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "2. Check contract compatibility for any breaking changes" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify provider implementations satisfy all consumer contracts" >> $GITHUB_STEP_SUMMARY

      - name: Check overall status
        run: |
          if [[ "${{ needs.consumer-contract-tests.result }}" == "success" && 
                "${{ needs.provider-contract-tests.result }}" == "success" && 
                "${{ needs.scenario-integration-tests.result }}" == "success" && 
                "${{ needs.property-based-tests.result }}" == "success" ]]; then
            echo "✅ All contract tests passed successfully"
            exit 0
          else
            echo "❌ Some contract tests failed - check individual job results"
            exit 1
          fi
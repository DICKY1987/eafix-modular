# enhanced_dashboard_gui.py - Enhanced GUI with percent change matrix and currency strength
import tkinter as tk
from tkinter import ttk
import threading
import queue
import time
from datetime import datetime
from typing import Dict, List, Any, Optional
import json

from dashboard_backend import DashboardEngine, DashboardFactory
from advanced_indicators import (
    PercentChangeIndicator, CurrencyStrengthIndicator, ADXTrendStrengthIndicator,
    PercentChangeMatrix, CurrencyStrengthMatrix, EnhancedSignalAggregator
)

class PercentChangeMatrixWidget(ttk.Frame):
    """Widget displaying percent change matrix"""
    
    def __init__(self, parent, symbols: List[str], **kwargs):
        super().__init__(parent, **kwargs)
        self.symbols = symbols
        self.timeframes = ['15m', '1h', '4h', '8h', '12h', '24h']
        self.matrix_cells = {}
        self.matrix_data = PercentChangeMatrix(symbols, self.timeframes)
        
        # Initialize indicators
        for symbol in symbols:
            self.matrix_data.add_symbol(symbol)
        
        self.setup_ui()
    
    def setup_ui(self):
        """Setup the matrix UI"""
        # Title
        title_label = ttk.Label(self, text="Percent Change Matrix", font=('Arial', 12, 'bold'))
        title_label.pack(pady=(0, 10))
        
        # Create matrix frame with scrollbar
        matrix_container = ttk.Frame(self)
        matrix_container.pack(fill='both', expand=True)
        
        # Canvas for scrolling
        canvas = tk.Canvas(matrix_container)
        scrollbar = ttk.Scrollbar(matrix_container, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Build matrix table
        headers = ['Symbol'] + self.timeframes
        
        # Header row
        for col, header in enumerate(headers):
            label = ttk.Label(
                scrollable_frame, 
                text=header, 
                font=('Arial', 9, 'bold'),
                anchor='center',
                relief='raised'
            )
            label.grid(row=0, column=col, padx=1, pady=1, sticky='ew')
        
        # Data rows
        for row, symbol in enumerate(self.symbols, 1):
            # Symbol label
            symbol_label = ttk.Label(
                scrollable_frame,
                text=symbol,
                font=('Arial', 9, 'bold'),
                anchor='center'
            )
            symbol_label.grid(row=row, column=0, padx=1, pady=1, sticky='ew')
            
            # Percent change cells
            for col, timeframe in enumerate(self.timeframes, 1):
                cell = tk.Label(
                    scrollable_frame,
                    text="0.00%",
                    font=('Arial', 8),
                    anchor='center',
                    relief='sunken',
                    width=8
                )
                cell.grid(row=row, column=col, padx=1, pady=1, sticky='ew')
                
                # Store cell reference
                self.matrix_cells[f"{symbol}_{timeframe}"] = cell
        
        # Configure column weights
        for col in range(len(headers)):
            scrollable_frame.columnconfigure(col, weight=1)
        
        # Pack canvas and scrollbar
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # Legend
        self.create_legend(matrix_container)
    
    def create_legend(self, parent):
        """Create color legend for matrix"""
        legend_frame = ttk.LabelFrame(parent, text="Legend")
        legend_frame.pack(fill='x', pady=(5, 0))
        
        legend_items = [
            ("Strong Bullish", "#006400", "> +0.5%"),
            ("Bullish", "#32CD32", "+0.1% to +0.5%"),
            ("Neutral", "#D3D3D3", "-0.1% to +0.1%"),
            ("Bearish", "#FF6347", "-0.1% to -0.5%"),
            ("Strong Bearish", "#8B0000", "< -0.5%")
        ]
        
        for i, (label, color, range_text) in enumerate(legend_items):
            color_box = tk.Label(
                legend_frame,
                bg=color,
                width=3,
                relief='solid'
            )
            color_box.grid(row=0, column=i*2, padx=2, pady=2)
            
            text_label = ttk.Label(legend_frame, text=f"{label}\n{range_text}", font=('Arial', 7))
            text_label.grid(row=0, column=i*2+1, padx=(0, 10), pady=2)
    
    def update_matrix(self, symbol: str, price_data: Dict[str, Any]):
        """Update matrix with new price data"""
        self.matrix_data.update_symbol(symbol, price_data)
        
        # Get updated matrix data
        matrix_data = self.matrix_data.get_matrix_data()
        
        # Update display
        if symbol in matrix_data:
            symbol_data = matrix_data[symbol]
            for timeframe in self.timeframes:
                cell_key = f"{symbol}_{timeframe}"
                if cell_key in self.matrix_cells:
                    pct_change = symbol_data.get(timeframe, 0.0)
                    
                    # Update text
                    self.matrix_cells[cell_key].config(text=f"{pct_change:+.2f}%")
                    
                    # Update color
                    color_code = self.matrix_data.get_color_coding(pct_change)
                    color = self._get_color_for_code(color_code)
                    self.matrix_cells[cell_key].config(bg=color)
    
    def _get_color_for_code(self, color_code: str) -> str:
        """Convert color code to actual color"""
        color_map = {
            'strong_bullish': '#006400',
            'bullish': '#32CD32',
            'neutral': '#D3D3D3',
            'bearish': '#FF6347',
            'strong_bearish': '#8B0000'
        }
        return color_map.get(color_code, '#D3D3D3')

class CurrencyStrengthWidget(ttk.Frame):
    """Widget displaying currency strength analysis"""
    
    def __init__(self, parent, currencies: List[str], symbols: List[str], **kwargs):
        super().__init__(parent, **kwargs)
        self.currencies = currencies
        self.symbols = symbols
        self.strength_matrix = CurrencyStrengthMatrix(currencies, symbols)
        self.strength_cells = {}
        self.ranking_vars = {}
        
        self.setup_ui()
    
    def setup_ui(self):
        """Setup currency strength UI"""
        # Title
        title_label = ttk.Label(self, text="Currency Strength Analysis", font=('Arial', 12, 'bold'))
        title_label.pack(pady=(0, 10))
        
        # Main container
        main_container = ttk.Frame(self)
        main_container.pack(fill='both', expand=True)
        
        # Left side: Rankings
        self.create_rankings_panel(main_container)
        
        # Right side: Top pairs
        self.create_top_pairs_panel(main_container)
    
    def create_rankings_panel(self, parent):
        """Create currency strength rankings panel"""
        rankings_frame = ttk.LabelFrame(parent, text="Currency Strength Rankings")
        rankings_frame.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        # Headers
        headers = ['Rank', 'Currency', 'Strength', '1H', '4H', '24H']
        for col, header in enumerate(headers):
            label = ttk.Label(rankings_frame, text=header, font=('Arial', 9, 'bold'))
            label.grid(row=0, column=col, padx=2, pady=2, sticky='ew')
        
        # Currency rows
        for i, currency in enumerate(self.currencies):
            row = i + 1
            
            # Rank
            rank_var = tk.StringVar(value=str(i + 1))
            rank_label = ttk.Label(rankings_frame, textvariable=rank_var, anchor='center')
            rank_label.grid(row=row, column=0, padx=2, pady=1)
            
            # Currency
            currency_label = ttk.Label(rankings_frame, text=currency, font=('Arial', 9, 'bold'), anchor='center')
            currency_label.grid(row=row, column=1, padx=2, pady=1)
            
            # Strength score
            strength_var = tk.StringVar(value="0.0")
            strength_label = ttk.Label(rankings_frame, textvariable=strength_var, anchor='center')
            strength_label.grid(row=row, column=2, padx=2, pady=1)
            
            # Changes
            change_1h_var = tk.StringVar(value="0.0")
            change_4h_var = tk.StringVar(value="0.0")
            change_24h_var = tk.StringVar(value="0.0")
            
            ttk.Label(rankings_frame, textvariable=change_1h_var, anchor='center').grid(row=row, column=3, padx=2, pady=1)
            ttk.Label(rankings_frame, textvariable=change_4h_var, anchor='center').grid(row=row, column=4, padx=2, pady=1)
            ttk.Label(rankings_frame, textvariable=change_24h_var, anchor='center').grid(row=row, column=5, padx=2, pady=1)
            
            # Store variables
            self.ranking_vars[currency] = {
                'rank': rank_var,
                'strength': strength_var,
                'change_1h': change_1h_var,
                'change_4h': change_4h_var,
                'change_24h': change_24h_var,
                'strength_label': strength_label
            }
        
        # Configure column weights
        for col in range(len(headers)):
            rankings_frame.columnconfigure(col, weight=1)
    
    def create_top_pairs_panel(self, parent):
        """Create top trading pairs panel"""
        pairs_frame = ttk.LabelFrame(parent, text="Top Trading Opportunities")
        pairs_frame.pack(side='right', fill='both', expand=True, padx=(5, 0))
        
        # Headers
        headers = ['Pair', 'Direction', 'Strength Diff', 'Setup']
        for col, header in enumerate(headers):
            label = ttk.Label(pairs_frame, text=header, font=('Arial', 9, 'bold'))
            label.grid(row=0, column=col, padx=2, pady=2, sticky='ew')
        
        # Placeholder rows for top pairs
        self.top_pairs_vars = []
        for i in range(5):  # Show top 5 pairs
            row = i + 1
            
            pair_var = tk.StringVar(value="---")
            direction_var = tk.StringVar(value="---")
            diff_var = tk.StringVar(value="---")
            setup_var = tk.StringVar(value="---")
            
            ttk.Label(pairs_frame, textvariable=pair_var, anchor='center').grid(row=row, column=0, padx=2, pady=1)
            direction_label = ttk.Label(pairs_frame, textvariable=direction_var, anchor='center')
            direction_label.grid(row=row, column=1, padx=2, pady=1)
            ttk.Label(pairs_frame, textvariable=diff_var, anchor='center').grid(row=row, column=2, padx=2, pady=1)
            ttk.Label(pairs_frame, textvariable=setup_var, anchor='center').grid(row=row, column=3, padx=2, pady=1)
            
            self.top_pairs_vars.append({
                'pair': pair_var,
                'direction': direction_var,
                'diff': diff_var,
                'setup': setup_var,
                'direction_label': direction_label
            })
        
        # Configure column weights
        for col in range(len(headers)):
            pairs_frame.columnconfigure(col, weight=1)
    
    def update_strength_data(self, symbol: str, price_data: Dict[str, Any]):
        """Update currency strength with new price data"""
        self.strength_matrix.update_pair_data(symbol, price_data)
        
        # Update rankings display
        rankings = self.strength_matrix.get_strength_rankings()
        
        for ranking_data in rankings:
            currency = ranking_data.currency
            if currency in self.ranking_vars:
                vars_dict = self.ranking_vars[currency]
                
                # Update values
                vars_dict['rank'].set(str(ranking_data.rank))
                vars_dict['strength'].set(f"{ranking_data.strength_score:.1f}")
                vars_dict['change_1h'].set(f"{ranking_data.change_1h:+.1f}")
                vars_dict['change_4h'].set(f"{ranking_data.change_4h:+.1f}")
                vars_dict['change_24h'].set(f"{ranking_data.change_24h:+.1f}")
                
                # Color code strength
                strength_color = self._get_strength_color(ranking_data.strength_score)
                vars_dict['strength_label'].config(foreground=strength_color)
        
        # Update top pairs
        top_pairs = self.strength_matrix.get_top_pairs()
        
        for i, pair_vars in enumerate(self.top_pairs_vars):
            if i < len(top_pairs):
                pair_data = top_pairs[i]
                
                pair_vars['pair'].set(pair_data['symbol'])
                pair_vars['direction'].set(pair_data['direction'].upper())
                pair_vars['diff'].set(f"{pair_data['strength_diff']:.1f}")
                
                # Setup quality based on strength difference
                if pair_data['strength_diff'] > 50:
                    setup = "Excellent"
                    setup_color = "#006400"
                elif pair_data['strength_diff'] > 30:
                    setup = "Good"
                    setup_color = "#32CD32"
                else:
                    setup = "Fair"
                    setup_color = "#FFD700"
                
                pair_vars['setup'].set(setup)
                
                # Color code direction
                direction_color = "#006400" if pair_data['direction'] == 'buy' else "#8B0000"
                pair_vars['direction_label'].config(foreground=direction_color)
                
            else:
                # Clear unused rows
                pair_vars['pair'].set("---")
                pair_vars['direction'].set("---")
                pair_vars['diff'].set("---")
                pair_vars['setup'].set("---")
    
    def _get_strength_color(self, strength: float) -> str:
        """Get color for strength value"""
        if strength > 30:
            return "#006400"  # Dark green
        elif strength > 10:
            return "#32CD32"  # Light green
        elif strength < -30:
            return "#8B0000"  # Dark red
        elif strength < -10:
            return "#FF6347"  # Light red
        else:
            return "#000000"  # Black (neutral)

class EnhancedDashboardTab(ttk.Frame):
    """Enhanced dashboard tab with all advanced features"""
    
    def __init__(self, parent, dde_client=None, price_manager=None):
        super().__init__(parent)
        
        # Initialize enhanced dashboard engine
        self.dashboard_engine = DashboardFactory.create_forex_dashboard()
        self.enhanced_aggregator = EnhancedSignalAggregator()
        
        # Client references
        self.dde_client = dde_client
        self.price_manager = price_manager
        
        # Currency settings
        self.major_currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CHF', 'AUD', 'CAD', 'NZD']
        
        # GUI components
        self.signal_cells = {}
        self.summary_cells = {}
        self.confidence_bars = {}
        self.selected_timeframe = tk.StringVar(value='M15')
        
        # Update queue
        self.update_queue = queue.Queue()
        
        self.setup_ui()
        self.setup_advanced_indicators()
        self.start_background_updates()
    
    def setup_ui(self):
        """Setup the enhanced dashboard UI"""
        # Create main notebook for different views
        self.main_notebook = ttk.Notebook(self)
        self.main_notebook.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Tab 1: Main signals matrix
        self.create_signals_tab()
        
        # Tab 2: Percent change matrix
        self.create_percent_change_tab()
        
        # Tab 3: Currency strength analysis
        self.create_currency_strength_tab()
        
        # Tab 4: Market overview
        self.create_market_overview_tab()
        
        # Start processing updates
        self.process_updates()
    
    def create_signals_tab(self):
        """Create main signals matrix tab"""
        signals_frame = ttk.Frame(self.main_notebook)
        self.main_notebook.add(signals_frame, text="Signals Matrix")
        
        # Controls
        controls_frame = ttk.Frame(signals_frame)
        controls_frame.pack(fill='x', padx=5, pady=5)
        
        # Timeframe selection
        ttk.Label(controls_frame, text="Timeframe:").pack(side='left')
        
        timeframes = ['M1', 'M5', 'M15', 'M30', 'H1', 'H4', 'D1']
        for tf in timeframes:
            btn = ttk.Radiobutton(
                controls_frame,
                text=tf,
                variable=self.selected_timeframe,
                value=tf,
                command=self.on_timeframe_changed
            )
            btn.pack(side='left', padx=2)
        
        # Status
        self.status_var = tk.StringVar(value="Initializing...")
        ttk.Label(controls_frame, textvariable=self.status_var).pack(side='right')
        
        # Signal matrix (simplified version from previous implementation)
        matrix_frame = ttk.LabelFrame(signals_frame, text="Signal Matrix")
        matrix_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Matrix content would be built here (similar to previous implementation)
        self.build_signals_matrix(matrix_frame)
    
    def create_percent_change_tab(self):
        """Create percent change matrix tab"""
        pct_frame = ttk.Frame(self.main_notebook)
        self.main_notebook.add(pct_frame, text="Percent Change Matrix")
        
        # Create percent change matrix widget
        self.percent_change_widget = PercentChangeMatrixWidget(
            pct_frame,
            self.dashboard_engine.symbols
        )
        self.percent_change_widget.pack(fill='both', expand=True, padx=5, pady=5)
    
    def create_currency_strength_tab(self):
        """Create currency strength analysis tab"""
        strength_frame = ttk.Frame(self.main_notebook)
        self.main_notebook.add(strength_frame, text="Currency Strength")
        
        # Create currency strength widget
        self.currency_strength_widget = CurrencyStrengthWidget(
            strength_frame,
            self.major_currencies,
            self.dashboard_engine.symbols
        )
        self.currency_strength_widget.pack(fill='both', expand=True, padx=5, pady=5)
    
    def create_market_overview_tab(self):
        """Create market overview tab"""
        overview_frame = ttk.Frame(self.main_notebook)
        self.main_notebook.add(overview_frame, text="Market Overview")
        
        # Market summary
        summary_frame = ttk.LabelFrame(overview_frame, text="Market Summary")
        summary_frame.pack(fill='x', padx=5, pady=5)
        
        # Overall bias
        bias_frame = ttk.Frame(summary_frame)
        bias_frame.pack(fill='x', padx=5, pady=5)
        
        ttk.Label(bias_frame, text="Market Bias:", font=('Arial', 12, 'bold')).pack(side='left')
        self.market_bias_var = tk.StringVar(value="Neutral")
        bias_label = ttk.Label(bias_frame, textvariable=self.market_bias_var, font=('Arial', 12))
        bias_label.pack(side='left', padx=(10, 0))
        
        # Signal counts
        counts_frame = ttk.Frame(summary_frame)
        counts_frame.pack(fill='x', padx=5, pady=5)
        
        self.total_buy_var = tk.StringVar(value="0")
        self.total_sell_var = tk.StringVar(value="0")
        self.active_signals_var = tk.StringVar(value="0")
        
        ttk.Label(counts_frame, text="Buy Signals:").grid(row=0, column=0, sticky='w')
        ttk.Label(counts_frame, textvariable=self.total_buy_var, foreground='green').grid(row=0, column=1, sticky='w')
        
        ttk.Label(counts_frame, text="Sell Signals:").grid(row=1, column=0, sticky='w')
        ttk.Label(counts_frame, textvariable=self.total_sell_var, foreground='red').grid(row=1, column=1, sticky='w')
        
        ttk.Label(counts_frame, text="Active Signals:").grid(row=2, column=0, sticky='w')
        ttk.Label(counts_frame, textvariable=self.active_signals_var).grid(row=2, column=1, sticky='w')
        
        # Performance metrics
        perf_frame = ttk.LabelFrame(overview_frame, text="Performance Metrics")
        perf_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Add performance tracking here (hit rates, etc.)
        ttk.Label(perf_frame, text="Performance tracking coming soon...").pack(pady=20)
    
    def setup_advanced_indicators(self):
        """Setup advanced indicators (ADX, etc.)"""
        # Add ADX indicators for trend strength
        for symbol in self.dashboard_engine.symbols:
            for timeframe in self.dashboard_engine.timeframes:
                adx_indicator = ADXTrendStrengthIndicator(symbol, timeframe)
                self.enhanced_aggregator.add_adx_indicator(symbol, timeframe, adx_indicator)
                
                # Add to dashboard engine
                key = f"{symbol}_{timeframe}_ADX"
                self.dashboard_engine.active_indicators[key] = adx_indicator
    
    def build_signals_matrix(self, parent):
        """Build simplified signals matrix"""
        # This is a simplified version - full implementation would be similar to previous
        ttk.Label(parent, text="Signal matrix will be built here").pack(pady=20)
    
    def on_timeframe_changed(self):
        """Handle timeframe change"""
        self.status_var.set(f"Switched to {self.selected_timeframe.get()}")
    
    def start_background_updates(self):
        """Start background updates"""
        def update_worker():
            while True:
                try:
                    # Generate mock data or get from DDE
                    mock_data = self._generate_mock_data()
                    
                    # Update dashboard
                    self.dashboard_engine.update_signals(mock_data)
                    
                    # Update advanced widgets
                    for symbol, symbol_data in mock_data.items():
                        for timeframe, price_data in symbol_data.items():
                            # Update percent change matrix
                            self.update_queue.put(('percent_change', symbol, price_data))
                            
                            # Update currency strength
                            self.update_queue.put(('currency_strength', symbol, price_data))
                    
                    # Update overall dashboard
                    dashboard_data = self.dashboard_engine.get_dashboard_data()
                    self.update_queue.put(('dashboard', dashboard_data))
                    
                    time.sleep(self.dashboard_engine.update_interval)
                    
                except Exception as e:
                    self.update_queue.put(('error', str(e)))
                    time.sleep(1)
        
        # Start dashboard engine
        self.dashboard_engine.start_real_time_updates()
        
        # Start update worker
        update_thread = threading.Thread(target=update_worker, daemon=True)
        update_thread.start()
    
    def process_updates(self):
        """Process updates from background thread"""
        try:
            while True:
                try:
                    update_type, *data = self.update_queue.get_nowait()
                    
                    if update_type == 'percent_change':
                        symbol, price_data = data
                        self.percent_change_widget.update_matrix(symbol, price_data)
                        
                    elif update_type == 'currency_strength':
                        symbol, price_data = data
                        self.currency_strength_widget.update_strength_data(symbol, price_data)
                        
                    elif update_type == 'dashboard':
                        dashboard_data = data[0]
                        self.update_market_overview(dashboard_data)
                        
                    elif update_type == 'error':
                        self.status_var.set(f"Error: {data[0]}")
                        
                except queue.Empty:
                    break
                    
        except Exception as e:
            print(f"Error processing updates: {e}")
        
        # Schedule next update
        self.after(1000, self.process_updates)
    
    def update_market_overview(self, dashboard_data):
        """Update market overview tab"""
        signal_matrix = dashboard_data.get('signal_matrix', {})
        summary_data = dashboard_data.get('summary_data', {})
        
        total_buy = 0
        total_sell = 0
        total_signals = 0
        
        # Count all signals
        for symbol_data in summary_data.values():
            for tf_data in symbol_data.values():
                if isinstance(tf_data, dict):
                    total_buy += tf_data.get('buy_signals', 0)
                    total_sell += tf_data.get('sell_signals', 0)
        
        total_signals = total_buy + total_sell
        
        # Update variables
        self.total_buy_var.set(str(total_buy))
        self.total_sell_var.set(str(total_sell))
        self.active_signals_var.set(str(total_signals))
        
        # Determine market bias
        if total_buy > total_sell * 1.5:
            bias = "Bullish"
        elif total_sell > total_buy * 1.5:
            bias = "Bearish"
        else:
            bias = "Neutral"
        
        self.market_bias_var.set(bias)
        
        # Update status
        self.status_var.set(f"Updated: {datetime.now().strftime('%H:%M:%S')}")
    
    def _generate_mock_data(self):
        """Generate mock price data for testing"""
        import random
        mock_data = {}
        
        for symbol in self.dashboard_engine.symbols:
            mock_data[symbol] = {}
            
            base_price = 1.1000 if 'EUR' in symbol else 1.0000
            
            for timeframe in ['M15']:  # Just update M15 for now
                close = base_price + random.uniform(-0.01, 0.01)
                high = close + random.uniform(0, 0.005)
                low = close - random.uniform(0, 0.005)
                open_price = low + random.uniform(0, high - low)
                
                mock_data[symbol][timeframe] = {
                    'open': open_price,
                    'high': high,
                    'low': low,
                    'close': close,
                    'volume': random.randint(1000, 10000),
                    'timestamp': datetime.now()
                }
        
        return mock_data

# Integration function for adding to existing application
def add_enhanced_dashboard_to_app(notebook_widget, dde_client=None, price_manager=None):
    """Add enhanced dashboard to existing application"""
    enhanced_dashboard = EnhancedDashboardTab(notebook_widget, dde_client, price_manager)
    notebook_widget.add(enhanced_dashboard, text="Enhanced Dashboard")
    return enhanced_dashboard

# Example usage
if __name__ == "__main__":
    root = tk.Tk()
    root.title("Enhanced Trading Dashboard")
    root.geometry("1600x1000")
    
    # Create enhanced dashboard
    dashboard = EnhancedDashboardTab(root)
    dashboard.pack(fill='both', expand=True)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        dashboard.dashboard_engine.stop_real_time_updates()
        root.quit()
